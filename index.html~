<!DOCTYPE html>
<html>
  <head>
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="chrome=1">

    <link rel="stylesheet" type="text/css" href="stylesheets/stylesheet.css" media="screen" />
    <link rel="stylesheet" type="text/css" href="stylesheets/pygment_trac.css" media="screen" />
    <link rel="stylesheet" type="text/css" href="stylesheets/print.css" media="print" />

    <title>Scalesque by Noel Kennedy</title>
  </head>

  <body>

    <header>
      <div class="container">
        <h1>Scalesque</h1>
        <h2>Scala inspired functional programming for c#</h2>

        <section id="downloads">
          <a href="https://github.com/NoelKennedy/scalesque" class="btn btn-github"><span class="icon"></span>View on GitHub</a>
        </section>
      </div>
    </header>

    <div class="container">
      <section id="main_content">
        <h3>Functional-programming in c#</h3>
		<p>Scalesque enables a functional-programming style in c#.  It is an open source micro library written in c# with no dependencies other than .net</p>
	 
	 	dfdf
	 			
		
		<h3>Features</h3>
		
		<h4>Option&lt;T&gt; : Replace null references with compiler enforced check</h4>
		<p>'Object reference not set to an instance of an object' - a <a href="http://qconlondon.com/london-2009/presentation/Null+References:+The+Billion+Dollar+Mistake">billion dollar mistake</a></p>
		<p>Option&lt;T&gt;, aka Maybe&lt;T&gt;, is a wrapper for optional references or values.  It works by using the type system to treat optional values differently.</p>
		<p>By using Option, instead of a null reference to an object, you are ensuring that programmers have to deal with the fact that your value maybe null.  In fact, they can't ignore it as their programs won't even compile unless they handle the case of None&lt;T&gt; where the value is missing.</p>
		
		<h4>Either&lt;T,U&gt;</h4>
		<p>Controls orthagonal results of program logic in a typesafe manner.  It avoids '<a href="http://www.joelonsoftware.com/items/2003/10/13.html">goto</a>' control flow.  A programmer is aware of all potential code paths in a routine at compile time.</p>
		
		<h4>Pattern matching</h4>
		<p>Scalesque's pattern matching controls program flow in a similar way to c#'s <a href="http://msdn.microsoft.com/en-us/library/06tc147t.aspx">switch-case statements</a>.  However, instead of just matching a variable to a literal, pattern matching allows you to match on anything you can think of.</p>
		replace this with clearer example and no comments		
		<img src="images/pattern_matching_example.PNG"/>
		<br/>
		<h4>Validation&lt;T,U&gt; : Compose logic without having to control progam logic</h4>
		<p>Scalesque validation allows you to compose a series of validating checks, without having 
		to implement any control flow.  	When the last check is performed you either get a Success&ltU&gt; or a non empty list of validation failures.  Without changing your validating functions, you can change your logic, you can change your control of flow to fail on the first check.  You either get a successful validation result, or the first failure.  All of this is implemented via statically typed compile checks but without having to write any control flow logic yourself.</p>  
		
		
      </section>
    </div>

    
  </body>
</html>